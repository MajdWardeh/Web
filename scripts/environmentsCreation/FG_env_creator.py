import os
import numpy as np
import math
import matplotlib.pyplot as plt
import yaml

def visualize(gatesLocations):
    xs = gatesLocations[:, 0]
    ys = gatesLocations[:, 1]
    
    plt.figure()
    plt.plot(xs, ys, 'ro')
    for gate in gatesLocations:
        yaw = gate[3] * np.pi/180.0
        r = 3
        plt.quiver( gate[0], gate[1], r*math.cos(yaw), r*math.sin(yaw) ) #, color='r', scale=21)
    plt.show()

def writeToFile(gatesLocations, dir):
    path = os.path.join(dir, 'gateLocationsFile.txt')
    gatesLocationsDict = {}
    with open(path, 'w+') as f:
        for i, gate in enumerate(gatesLocations):
            gatesLocationsDict['gate{}B'.format(i)] = gate
            f.write('gate{}B: {}, {}, {}, {}, 2, 2, 2\n'.format(i, gate[0], gate[1], gate[2], gate[3]))
    return gatesLocationsDict

def generateGateLocations(dir):
    numOfGates = 8
    R = 8
    z = 0.0
    center = (0, 0)

    gatesLocations = []
    for i, angle in enumerate(np.linspace(0, 2*np.pi, numOfGates)):
        x = center[0] + R * math.cos(angle)
        y = center[1] + R * math.sin(angle)
        yaw = ((angle - np.pi/2) * 180.0/np.pi) % 360
        gatesLocations.append(np.array([x, y, z, yaw]))
    gatesLocations = np.array(gatesLocations)
    return gatesLocations

def createGatesLocations(dir):
    gatesLocation = []

    gatesLocation.append([0, 0, 0, 90])

    gatesLocation = np.array(gatesLocation)
    return gatesLocation


def readMarkrsLocationsFile(dir):
    '''
        reads 'markerLocations.yaml' file generated by FlightGoggles and compute the center of the gates in 3d.
        @param: dir, the directory of the ymal file.
        @return: two dictionaries: 1. a dictionary with the name of the gates as keys and their respective center as values. 
            2. a dictionary has the name of gates as key, and a numpy array of their respective markers location as a value.
    '''
    path = os.path.join(dir, 'markerLocations.yaml')
    with open(path, 'r') as stream:
        try:
            markersLocationDict = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)
    markersLocationDict_np = {}
    for gate in markersLocationDict.keys():
        markersLocation = markersLocationDict[gate]['location']
        markersLocation = np.array(markersLocation)
        markersLocationDict_np[gate] = markersLocation 
        
    return markersLocationDict_np

def generatePoeseForTrajectorPlanning(gt_gatesLocationsDict, FG_gatesLocationsDict, dirToSaveTrajectoryFile):
    poses = []
    gates = sorted(gt_gatesLocationsDict.keys(), key=lambda x:x[:-1])
    print('sorted gates by name:')
    print(gates)
    for gate in gates:
        gateCenter = FG_gatesLocationsDict[gate]
        gateYaw = gt_gatesLocationsDict[gate][-1]
        droneYaw = (gateYaw + 180.0) % 360.0 # get the opposit direction of the gate
        droneYaw = droneYaw * np.pi / 180.0 # convert it to [rad]
        pose = np.array([gateCenter[0], gateCenter[1], gateCenter[2], droneYaw])
        poses.append(pose)
    path = os.path.join(dirToSaveTrajectoryFile, 'posesLocations.yaml')
    with open(path, 'w+') as f:
        for i, pose in enumerate(poses):
            f.write('v{}: {}\n'.format(i, pose.tolist()))

def printMarkersLocationForDataCollection(FG_gatesLocationsDict, FG_markersLocationDict):
    targetGate = 'gate0B'
    targetGateCenter = FG_gatesLocationsDict[targetGate]
    targetGateMarkersLocation = FG_markersLocationDict[targetGate]
    targetGateMarkersLocation = targetGateMarkersLocation.T
    print(targetGateCenter)
    print(repr(targetGateMarkersLocation))


def main():
    dir = '/home/majd/catkin_ws/src/basic_rl_agent/data/FG_linux/FG_gatesPlacementFile'
    # gatesLocations = generateGateLocations(dir)
    gatesLocations = createGatesLocations(dir)
    # visualize(gatesLocations)
    gt_gatesLocationsDict = writeToFile(gatesLocations,  dir)
    FG_markersLocationDict = readMarkrsLocationsFile(dir)

    FG_gatesLocationsDict = {}
    for gate, markers in FG_markersLocationDict.items:
        FG_gatesLocationsDict[gate] = np.mean(markers)

    printMarkersLocationForDataCollection(FG_gatesLocationsDict, FG_markersLocationDict)
    # generatePoeseForTrajectorPlanning(gt_gatesLocationsDict, FG_gatesLocationsDict, '.')

if __name__ == "__main__":
    main()